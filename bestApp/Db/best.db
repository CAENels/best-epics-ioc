## Waveform from input channel of TetrAmm picoammeter unit, BPM0.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM0:Ch1")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 1")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM0ch1")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM1.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM1:Ch1")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 1")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM1ch1")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM0.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM0:Ch2")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 2")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM0ch2")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM1.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM1:Ch2")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 2")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM1ch2")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM0.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM0:Ch3")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 3")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM0ch3")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM1.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM1:Ch3")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 3")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM1ch3")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM0.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM0:Ch4")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 4")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM0ch4")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Waveform from input channel of TetrAmm picoammeter unit, BPM1.
## Default sampling frequency is 1kHz (decimation from 100kHz).
record(waveform,"$(P):TetrAMM1:Ch4")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "TetrAMM Input Channel 4")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_TetrAMM1ch4")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Change TetrAMM range, BPM0.
record(bo,"$(P):TetrAMM0:Range")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "TetrAMM Range")
    field( OUT,  "@best_TetrAMM0range")
}

## Change TetrAMM range, BPM1.
record(bo,"$(P):TetrAMM1:Range")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "TetrAMM Range")
    field( OUT,  "@best_TetrAMM1range")
}

## X position, BPM0.
record(waveform,"$(P):BPM0:PosX")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "Position X")
    field( FTVL, "DOUBLE")
    field( EGU,  "um")
    field( INP,  "@best_BPM0wfmX")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## X position, BPM1.
record(waveform,"$(P):BPM1:PosX")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "Position X")
    field( FTVL, "DOUBLE")
    field( EGU,  "um")
    field( INP,  "@best_BPM1wfmX")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Y position, BPM0.
record(waveform,"$(P):BPM0:PosY")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "Position Y")
    field( FTVL, "DOUBLE")
    field( EGU,  "um")
    field( INP,  "@best_BPM0wfmY")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Y position, BPM1.
record(waveform,"$(P):BPM1:PosY")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "Position Y")
    field( FTVL, "DOUBLE")
    field( EGU,  "um")
    field( INP,  "@best_BPM1wfmY")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Intensity, BPM0.
record(waveform,"$(P):BPM0:Int")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "Intensity")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_BPM0wfmInt")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Intensity, BPM0.
record(waveform,"$(P):BPM1:Int")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "Intensity")
    field( FTVL, "DOUBLE")
    field( EGU,  "Amper")
    field( INP,  "@best_BPM1wfmInt")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## X position scaling parameter, BPM0.
record(ao,"$(P):BPM0:ScaleX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "Set BPM0 position X")
    field( EGU,  "um/1")
    field( OUT,  "@best_BPM0scaleX")
}

## X position scaling parameter, BPM0, readback value.
record(ai,"$(P):BPM0:ScaleX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "Get BPM0 position X")
    field( EGU,  "um/1")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_BPM0scaleX")
}

## X position scaling parameter, BPM1.
record(ao,"$(P):BPM1:ScaleX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "Set BPM1 position X")
    field( EGU,  "um/1")
    field( OUT,  "@best_BPM1scaleX")
}

## X position scaling parameter, BPM1, readback value.
record(ai,"$(P):BPM1:ScaleX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "Get BPM1 position X")
    field( EGU,  "um/1")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_BPM1scaleX")
}

## Y position scaling parameter, BPM0.
record(ao,"$(P):BPM0:ScaleY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "Set BPM0 position X")
    field( EGU,  "um/1")
    field( OUT,  "@best_BPM0scaleY")
}

## Y position scaling parameter, BPM0, readback value.
record(ai,"$(P):BPM0:ScaleY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "Get BPM position Y")
    field( EGU,  "um/1")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_BPM0scaleY")
}

## Y position scaling parameter, BPM1.
record(ao,"$(P):BPM1:ScaleY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "Set BPM1 position Y")
    field( EGU,  "um/1")
    field( OUT,  "@best_BPM1scaleY")
}

## Y position scaling parameter, BPM1, readback value.
record(ai,"$(P):BPM1:ScaleY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM position Y")
    field( EGU,  "um/1")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_BPM1scaleY")
}

## Number of TetrAMMs/EnBOXes connected on the SFP.
record(mbbi,"$(P):NumberTetrAMM")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( ZRST, "No TetrAMMs")
    field( ONST, "1 TetrAMM")
    field( TWST, "2 TetrAMMs")
    field( SCAN, "1 second")
    field( INP,  "@best_NumberTetrAMM")
}

## Status of PID controller.
record(mbbi,"$(P):PID:Status")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "PID status")
    field( ZRST, "Stopped")
    field( ONST, "Stopped by ROC")
    field( TWST, "Paused")
    field( THST, "Running")
    field( SCAN, "1 second")
    field( INP,  "@best_PIDstatus")
}

## Enable/disable PID controller.
record(bo,"$(P):PID:Enable")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID Enable")
    field( ZNAM, "OFF")
    field( ONAM, "ON")
    field( OUT,  "@best_PIDenable")
}

## Reset of PID controller.
record(bo,"$(P):PID:Reset")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID Reset")
    field( VAL,  "0")
    field( ONAM, "ON")
    field( ZNAM, "OFF")
    field( HIGH, "1")
    field( OUT,  "@best_PIDreset")
}

## Beam Setpoint on X position.
record(ao,"$(P):PID:SetpointX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Setpoint X")
    field( OUT, "@best_PidSetpointX")
    field( EGU, "um")
}

## Beam Setpoint on Y position.
record(ao,"$(P):PID:SetpointY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Setpoint Y")
    field( OUT, "@best_PidSetpointY")
    field( EGU, "um")
}

## Beam Setpoint on intensity.
record(ao,"$(P):PID:SetpointI0")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Setpoint I0")
    field( OUT, "@best_PidSetpointI0")
    field( EGU, "Amper")
}

## Beam Setpoint on X position, readback value.
record(ai,"$(P):PID:SetpointX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID Setpoint X")
    field( EGU,  "um")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_PidSetpointX")
}

## Beam Setpoint on Y position, readback value.
record(ai,"$(P):PID:SetpointY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID Setpoint Y")
    field( EGU,  "um")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_PidSetpointY")
}

## Beam Setpoint on intensity, readback value.
record(ai,"$(P):PID:SetpointI0_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID Setpoint I0")
    field( EGU,  "um")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_PidSetpointI0")
}

## Beam Offset on X position.
record(ao,"$(P):PID:OffsetX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Offset X")
    field( OUT, "@best_PidOffsetX")
    field( EGU, "V")
}

## Beam Offset on X position, readback value.
record(ai,"$(P):PID:OffsetX_RBV")
{
    field( DESC, "PID Offset X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOffsetX")
}

## Beam Offset on Y position.
record(ao,"$(P):PID:OffsetY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Offset Y")
    field( OUT, "@best_PidOffsetY")
    field( EGU, "V")
}

## Beam Offset on Y position, readback value.
record(ai,"$(P):PID:OffsetY_RBV")
{
    field( DESC, "PID Offset Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOffsetY")
}

## Beam Offset on instensity.
record(ao,"$(P):PID:OffsetI0")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Offset I0")
    field( OUT, "@best_PidOffsetI0")
    field( EGU, "V")
}

## Beam Offset on instensity, readback value.
record(ai,"$(P):PID:OffsetI0_RBV")
{
    field( DESC, "PID Offset I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOffsetI0")
}

## Set Output multiplexer.
## Output multiplexer allows to switch control from HW PID (HW via FPGA) to software (SW via PCIe).
## PreDAC output is controlled by HW PID (HW via FPGA).
## User can then manually control PreDAC output channels (SW via PCIe).
record(mbbo,"$(P):PreDAC0:OutMux")
{
    field( DTYP, "CAENels BEST Mbbo")
    field( DESC, "Out mux (1=SW, 0=HW)")
    field( ONST, "HW via FPGA")
    field( ZRST, "SW via PCIe")
    field( OUT,  "@best_PreDACoutmux")
}

## Set Output multiplexer, readback value
record(mbbi,"$(P):PreDAC0:OutMux_RBV")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "Out mux (1=SW, 0=HW)")
    field( ONST, "HW via FPGA")
    field( ZRST, "SW via PCIe")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_PreDACoutmux")
}

## Manual drive PreDAC output, CH1.
## OutMux need to be set to SW via PCIe.
record(ao,"$(P):PreDAC0:OutCh1")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PreDAC Out Channels (manual)")
    field( EGU,  "V")
    field( OUT,  "@best_PreDACoutCh1")
}

## Manual drive PreDAC output, CH2.
## OutMux need to be set to SW via PCIe.
record(ao,"$(P):PreDAC0:OutCh2")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PreDAC Out Channels (manual)")
    field( EGU,  "V")
    field( OUT,  "@best_PreDACoutCh2")
}

## Manual drive PreDAC output, CH3.
## OutMux need to be set to SW via PCIe.
record(ao,"$(P):PreDAC0:OutCh3")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PreDAC Out Channels (manual)")
    field( EGU,  "V")
    field( OUT,  "@best_PreDACoutCh3")
}

## Manual drive PreDAC output, CH4.
## OutMux need to be set to SW via PCIe.
record(ao,"$(P):PreDAC0:OutCh4")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PreDAC Out Channels (manual)")
    field( EGU,  "V")
    field( OUT,  "@best_PreDACoutCh4")
}

## Login command.
## Change user (cruise, user, admin).
record(stringout, "$(P):Login:UserPass")
{
    field( DTYP, "CAENels BEST Stringout")
    field( DESC, "User and Password, separated by colon")
    field( OUT,  "@best_LoginUserPass")
}

## Current login level.
record(mbbi, "$(P):Login:Level")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "Current access level")
    field( ZRST, "Cruise")
    field( ONST, "User")
    field( TWST, "Admin")
    field( SCAN, "1 second")
    field( INP,  "@best_LoginLevel")
}

## PreDAC output data, CH1.
## OutMux need to be set to HW via FPGA.
record(waveform,"$(P):PreDAC0:Ch1_RBV")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "PreDAC0 Output Channel 1")
    field( FTVL, "DOUBLE")
    field( EGU,  "Volt")
    field( INP,  "@best_rbv_PreDAC_Ch1")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## PreDAC output data, CH2.
## OutMux need to be set to HW via FPGA.
record(waveform,"$(P):PreDAC0:Ch2_RBV")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "PreDAC0 Output Channel 2")
    field( FTVL, "DOUBLE")
    field( EGU,  "Volt")
    field( INP,  "@best_rbv_PreDAC_Ch2")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## PreDAC output data, CH3.
## OutMux need to be set to HW via FPGA.
record(waveform,"$(P):PreDAC0:Ch3_RBV")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "PreDAC0 Output Channel 3")
    field( FTVL, "DOUBLE")
    field( EGU,  "Volt")
    field( INP,  "@best_rbv_PreDAC_Ch3")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## PreDAC output data, CH4.
## OutMux need to be set to HW via FPGA.
record(waveform,"$(P):PreDAC0:Ch4_RBV")
{
    field( DTYP, "CAENels BEST Waveform")
    field( DESC, "PreDAC0 Output Channel 4")
    field( FTVL, "DOUBLE")
    field( EGU,  "Volt")
    field( INP,  "@best_rbv_PreDAC_Ch4")
    field( NELM, "1024")
    field( SCAN, "1 second")
}

## Set PID Kp on X position.
record(ao,"$(P):PID:KpX")
{
    field( DESC, "PID Kp X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKpX")
}

## Set PID Ki on X position.
record(ao,"$(P):PID:KiX")
{
    field( DESC, "PID Ki X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKiX")
}

## Set PID Kd on X position.
record(ao,"$(P):PID:KdX")
{
    field( DESC, "PID Kd X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKdX")
}

## Set PID emin on X position.
record(ao,"$(P):PID:eminX")
{
    field( DESC, "PID emin X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PideminX")
}

## Set PID Imax on X position.
record(ao,"$(P):PID:ImaxX")
{
    field( DESC, "PID Imax X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidImaxX")
}

## Set PID Omin on X position.
record(ao,"$(P):PID:OminX")
{
    field( DESC, "PID Omin X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOminX")
}

## Set PID Omax on X position.
record(ao,"$(P):PID:OmaxX")
{
    field( DESC, "PID Omax X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOmaxX")
}

## Set PID Kp Ogain X position.
record(ao,"$(P):PID:OgainX")
{
    field( DESC, "PID Ogai X")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOgaiX")
}

## Set PID Kp on Y position.
record(ao,"$(P):PID:KpY")
{
    field( DESC, "PID Kp Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKpY")
}

## Set PID Ki on Y position.
record(ao,"$(P):PID:KiY")
{
    field( DESC, "PID Ki Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKiY")
}

## Set PID Kd on Y position.
record(ao,"$(P):PID:KdY")
{
    field( DESC, "PID Kd Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKdY")
}

## Set PID emin on Y position.
record(ao,"$(P):PID:eminY")
{
    field( DESC, "PID emin Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PideminY")
}

## Set PID Imax on Y position.
record(ao,"$(P):PID:ImaxY")
{
    field( DESC, "PID Imax Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidImaxY")
}

## Set PID Omin on Y position.
record(ao,"$(P):PID:OminY")
{
    field( DESC, "PID Omin Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOminY")
}

## Set PID Omax on Y position.
record(ao,"$(P):PID:OmaxY")
{
    field( DESC, "PID Omax Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOmaxY")
}

## Set PID Ogain on Y position.
record(ao,"$(P):PID:OgainY")
{
    field( DESC, "PID Ogai Y")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOgaiY")
}

## Set PID Kp on Intensity.
record(ao,"$(P):PID:KpI0")
{
    field( DESC, "PID Kp I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKpI0")
}

## Set PID Ki on Intensity.
record(ao,"$(P):PID:KiI0")
{
    field( DESC, "PID Ki I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKiI0")
}

## Set PID Kd on Intensity.
record(ao,"$(P):PID:KdI0")
{
    field( DESC, "PID Kd I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidKdI0")
}

## Set PID emin on Intensity.
record(ao,"$(P):PID:eminI0")
{
    field( DESC, "PID emin I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PideminI0")
}

## Set PID Imax on Intensity.
record(ao,"$(P):PID:ImaxI0")
{
    field( DESC, "PID Imax I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidImaxI0")
}

## Set PID Omin on Intensity.
record(ao,"$(P):PID:OminI0")
{
    field( DESC, "PID Omin I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOminI0")
}

## Set PID Omax on Intensity.
record(ao,"$(P):PID:OmaxI0")
{
    field( DESC, "PID Omax I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOmaxI0")
}

## Set PID Ogain on Intensity.
record(ao,"$(P):PID:OgainI0")
{
    field( DESC, "PID Ogain I0")
    field( DTYP, "CAENels BEST Ao")
    field( OUT, "@best_PidOgaiI0")
}

## PID Kp on X position, readback value.
record(ai,"$(P):PID:KpX_RBV")
{
    field( DESC, "PID Kp X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKpX")
}

## PID Ki on X position, readback value.
record(ai,"$(P):PID:KiX_RBV")
{
    field( DESC, "PID Ki X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKiX")
}

## PID Kd on X position, readback value.
record(ai,"$(P):PID:KdX_RBV")
{
    field( DESC, "PID Kd X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKdX")
}

## PID emin on X position, readback value.
record(ai,"$(P):PID:eminX_RBV")
{
    field( DESC, "PID emin X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PideminX")
}

## PID Imax on X position, readback value.
record(ai,"$(P):PID:ImaxX_RBV")
{
    field( DESC, "PID Imax X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidImaxX")
}

## PID Omin on X position, readback value.
record(ai,"$(P):PID:OminX_RBV")
{
    field( DESC, "PID Omin X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOminX")
}

## PID Omax on X position, readback value.
record(ai,"$(P):PID:OmaxX_RBV")
{
    field( DESC, "PID Omax X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOmaxX")
}

## PID Ogain on X position, readback value.
record(ai,"$(P):PID:OgainX_RBV")
{
    field( DESC, "PID Ogain X Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOgaiX")
}

## PID Kp on Y position, readback value.
record(ai,"$(P):PID:KpY_RBV")
{
    field( DESC, "PID Kp Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKpY")
}

## PID Ki on Y position, readback value.
record(ai,"$(P):PID:KiY_RBV")
{
    field( DESC, "PID Ki Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKiY")
}

## PID Kd on Y position, readback value.
record(ai,"$(P):PID:KdY_RBV")
{
    field( DESC, "PID Kd Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKdY")
}

## PID emin on Y position, readback value.
record(ai,"$(P):PID:eminY_RBV")
{
    field( DESC, "PID emin Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PideminY")
}

## PID Imax on Y position, readback value.
record(ai,"$(P):PID:ImaxY_RBV")
{
    field( DESC, "PID Imax Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidImaxY")
}

## PID Omin on Y position, readback value.
record(ai,"$(P):PID:OminY_RBV")
{
    field( DESC, "PID Omin Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOminY")
}

## PID Omax on Y position, readback value.
record(ai,"$(P):PID:OmaxY_RBV")
{
    field( DESC, "PID Omax Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOmaxY")
}

## PID Ogain on Y position, readback value.
record(ai,"$(P):PID:OgainY_RBV")
{
    field( DESC, "PID Ogain Y Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOgaiY")
}

## PID Kp on Intensity, readback value.
record(ai,"$(P):PID:KpI0_RBV")
{
    field( DESC, "PID Kp I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKpI0")
}

## PID Ki on Intensity, readback value.
record(ai,"$(P):PID:KiI0_RBV")
{
    field( DESC, "PID Ki I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKiI0")
}

## PID Kd on Intensity, readback value.
record(ai,"$(P):PID:KdI0_RBV")
{
    field( DESC, "PID Kd I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidKdI0")
}

## PID emin on Intensity, readback value.
record(ai,"$(P):PID:eminI0_RBV")
{
    field( DESC, "PID emin I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PideminI0")
}

## PID Imax on Intensity, readback value.
record(ai,"$(P):PID:ImaxI0_RBV")
{
    field( DESC, "PID Imax I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidImaxI0")
}

## PID Omin on Intensity, readback value.
record(ai,"$(P):PID:OminI0_RBV")
{
    field( DESC, "PID Omin I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOminI0")
}

## PID Omax on Intensity, readback value.
record(ai,"$(P):PID:OmaxI0_RBV")
{
    field( DESC, "PID Omax I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOmaxI0")
}

## PID Ogain on Intensity, readback value.
record(ai,"$(P):PID:OgainI0_RBV")
{
    field( DESC, "PID Ogain I0 Readback")
    field( DTYP, "CAENels BEST Ai")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_PidOgaiI0")
}

## Set BPM orient, BPM0.
record(bo,"$(P):BPM0:Orient")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "BPM Orientation")
    field( ZNAM, "45deg")
    field( ONAM, "90deg")
    field( OUT, "@best_Bpm0orient")
}

## Set BPM orient, BPM1.
record(bo,"$(P):BPM1:Orient")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "BPM Orientation")
    field( ZNAM, "45deg")
    field( ONAM, "90deg")
    field( OUT, "@best_Bpm1orient")
}

## BPM orient, BPM0, readback value.
record(mbbi,"$(P):BPM0:Orient_RBV")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "BPM Orientation")
    field( ZRST, "45deg")    
    field( ONST, "90deg")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_Bpm0orient")
}

## BPM orient, BPM1, readback value.
record(mbbi,"$(P):BPM1:Orient_RBV")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "BPM Orientation")
    field( ZRST, "45deg")    
    field( ONST, "90deg")
    field( SCAN, "1 second")
    field( INP, "@best_rbv_Bpm1orient")
}

## Set PID input configuration.
## Selects which PID controller to activate.
record(mbbo,"$(P):PID:INconfig")
{
    field( DTYP, "CAENels BEST Mbbo")
    field( DESC, "PID Configuration")
    field( ZRST, "X")
    field( ONST, "X & Y")
    field( TWST, "X & I0")
    field( THST, "Y")
    field( FRST, "Y & I0")
    field( FVST, "X & Y & I0")
    field( SXST, "I0")
    field( OUT,  "@best_PidConfigIN")
}

## PID input configuration, readback value.
record(mbbi,"$(P):PID:INconfig_RBV")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "PID Configuration")
    field( SCAN, "1 second")
    field( ZRST, "X")
    field( ONST, "X & Y")
    field( TWST, "X & I0")
    field( THST, "Y")
    field( FRST, "Y & I0")
    field( FVST, "X & Y & I0")
    field( SXST, "I0")
    field( INP,  "@best_rbv_PidConfigIN")
}

## Set PID output configuration.
## Configure which PID os connected to which PreDAC output channel.
record(ao,"$(P):PID:OUTconfig")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID out confselect")
    field( OUT,  "@best_PidConfigOUT")
}

## PID output configuration, readback value.
record(ai,"$(P):PID:OUTconfig_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID out conf")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_PidConfigOUT")
}

## Set BPM selector. 0: BPM0, 1: BPM1.
## example: "0 1 0" means X: BPM0, Y: BPM1, I0: BPM0.
record(mbbo,"$(P):BPM:Selector")
{
    field( DTYP, "CAENels BEST Mbbo")
    field( DESC, "BPM Selector Configuration")
    field( ZRST, "0 0 0")
    field( ONST, "0 0 1")
    field( TWST, "0 1 0")
    field( THST, "0 1 1")
    field( FRST, "1 0 0")
    field( FVST, "1 0 1")
    field( SXST, "1 1 0")
    field( SVST, "1 1 1")
    field( OUT,  "@best_SelectBpm")
}

## BPM selector, readback value.
record(mbbi,"$(P):BPM:Selector_RBV")
{
    field( DTYP, "CAENels BEST Mbbi")
    field( DESC, "PID Configuration")
    field( SCAN, "1 second")
    field( ZRST, "0 0 0")
    field( ONST, "0 0 1")
    field( TWST, "0 1 0")
    field( THST, "0 1 1")
    field( FRST, "1 0 0")
    field( FVST, "1 0 1")
    field( SXST, "1 1 0")
    field( SVST, "1 1 1")
    field( INP,  "@best_rbv_SelectBpm")
}

## Set BPM Crossbar, BPM0.
record(ao,"$(P):BPM0:Crossbar")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "BPM Crossbar")
    field( OUT,  "@best_Bpm0crossbar")
}

## BPM0 Crossbar readback value.
record(ai,"$(P):BPM0:Crossbar_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM Crossbar")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm0crossbar")
}

## Set BPM Crossbar, BPM1.
record(ao,"$(P):BPM1:Crossbar")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "BPM Crossbar")
    field( OUT,  "@best_Bpm1crossbar")
}

## BPM1 Crossbar readback value.
record(ai,"$(P):BPM1:Crossbar_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM Crossbar")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm1crossbar")
}

## Enable ROC X on BPM0.
record(bo,"$(P):BPM0:ENArocX")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID ENA ROC, BPM0, X pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_Bpm0EnarocX")
}

## Enable ROC Y on BPM0.
record(bo,"$(P):BPM0:ENArocY")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID ENA ROC, BPM0, Y pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_Bpm0EnarocY")
}

## Enable Beam Off Threshold on BPM0.
record(bo,"$(P):BPM0:ENAbeamOff")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID ENA ROC, BPM0, I0")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_Bpm0EnarocI0")
}

## Enable ROC X on BPM1.
record(bo,"$(P):BPM1:ENArocX")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID ENA ROC, BPM1, X pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_Bpm1EnarocX")
}

## Enable ROC Y on BPM1.
record(bo,"$(P):BPM1:ENArocY")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID ENA ROC, BPM1, Y pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_Bpm1EnarocY")
}

## Enable Beam Off Threshold on BPM1.
record(bo,"$(P):BPM1:ENAbeamOff")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "PID ENA ROC, BPM1, I0")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_Bpm1EnarocI0")
}

## Enable ROC X on BPM0, readback value.
record(bi,"$(P):BPM0:ENArocX_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "PID ENA ROC RBV, BPM0, X pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm0EnarocX")
}

## Enable ROC Y on BPM0, readback value.
record(bi,"$(P):BPM0:ENArocY_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "PID ENA ROC RBV, BPM0, Y pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm0EnarocY")
}

## Enable Beam Off Threshold on BPM0, readback value.
record(bi,"$(P):BPM0:ENAbeamOff_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "PID ENA ROC RBV, BPM0, I0")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm0EnarocI0")
}

## Enable ROC X on BPM1, readback value.
record(bi,"$(P):BPM1:ENArocX_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "PID ENA ROC RBV, BPM1, X pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm1EnarocX")
}

## Enable ROC Y on BPM1, readback value.
record(bi,"$(P):BPM1:ENArocY_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "PID ENA ROC RBV, BPM1, Y pos")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm1EnarocY")
}

## Enable Beam Off Threshold on BPM1, readback value.
record(bi,"$(P):BPM1:ENAbeamOff_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "PID ENA ROC RBV, BPM1, I0")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm1EnarocI0")
}

## Set ROC on X position, BPM0.
record(ao,"$(P):BPM0:RocX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID ROCX limits")
    field( OUT, "@best_Bpm0rocX")
    field( EGU, "um")
}

## Set ROC on X position, BPM1.
record(ao,"$(P):BPM1:RocX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID ROCX limits")
    field( OUT, "@best_Bpm1rocX")
    field( EGU, "um")
}

## Set ROC on Y position, BPM0.
record(ao,"$(P):BPM0:RocY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID ROCY limits")
    field( OUT, "@best_Bpm0rocY")
    field( EGU, "um")
}

## Set ROC on Y position, BPM1.
record(ao,"$(P):BPM1:RocY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID ROCY limits")
    field( OUT, "@best_Bpm1rocY")
    field( EGU, "um")
}

## Set Beam Off Threshold, BPM0.
record(ao,"$(P):BPM0:BeamOffTh")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID ROC limits")
    field( OUT, "@best_Bpm0rocI0")
    field( EGU, "Amper")
}

## Set Beam Off Threshold, BPM1.
record(ao,"$(P):BPM1:BeamOffTh")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID ROC limits")
    field( OUT, "@best_Bpm1rocI0")
    field( EGU, "Amper")
}

## ROC on X position, BPM0, readback value.
record(ai,"$(P):BPM0:RocX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID ROCX limits")
    field( INP, "@best_rbv_Bpm0rocX")
    field( EGU, "um")
    field( SCAN, "1 second")
}

## ROC on X position, BPM1, readback value.
record(ai,"$(P):BPM1:RocX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID ROCX limits")
    field( INP, "@best_rbv_Bpm1rocX")
    field( EGU, "um")
    field( SCAN, "1 second")
}

## ROC on Y position, BPM0, readback value.
record(ai,"$(P):BPM0:RocY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID ROCY limits")
    field( INP, "@best_rbv_Bpm0rocY")
    field( EGU, "um")
    field( SCAN, "1 second")
}

## ROC on Y position, BPM1, readback value.
record(ai,"$(P):BPM1:RocY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID ROCY limits")
    field( INP, "@best_rbv_Bpm1rocY")
    field( EGU, "um")
    field( SCAN, "1 second")
}

## Beam Off Threshold, BPM0, readback value.
record(ai,"$(P):BPM0:BeamOffTh_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID ROC limits")
    field( INP, "@best_rbv_Bpm0rocI0")
    field( EGU, "Amper")
    field( SCAN, "1 second")
}

## Beam Off Threshold, BPM1, readback value.
record(ai,"$(P):BPM1:BeamOffTh_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID ROC limits")
    field( INP, "@best_rbv_Bpm1rocI0")
    field( EGU, "Amper")
    field( SCAN, "1 second")
}

## Set BPM0 Offset on X position.
record(ao,"$(P):BPM0:OffsetX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "BPM0 offset X")
    field( EGU, "um")
    field( OUT,  "@best_Bpm0offsetX")
}

## BPM0 Offset on X position, readback value.
record(ai,"$(P):BPM0:OffsetX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM0 offset X RBV")
    field( SCAN, "1 second")
    field( EGU, "um")
    field( INP,  "@best_rbv_Bpm0offsetX")
}

## Set BPM1 Offset on X position.
record(ao,"$(P):BPM1:OffsetX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "BPM1 offset X")
    field( EGU, "um")
    field( OUT,  "@best_Bpm1offsetX")
}

## BPM1 Offset on X position, readback value.
record(ai,"$(P):BPM1:OffsetX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM1 offset X RBV")
    field( SCAN, "1 second")
    field( EGU, "um")
    field( INP,  "@best_rbv_Bpm1offsetX")
}

## Set BPM0 Offset on Y position.
record(ao,"$(P):BPM0:OffsetY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "BPM0 offset Y")
    field( OUT,  "@best_Bpm0offsetY")
}

## BPM0 Offset on Y position, readback value.
record(ai,"$(P):BPM0:OffsetY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM0 offset Y RBV")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_Bpm0offsetY")
}

## Set BPM1 Offset on Y position.
record(ao,"$(P):BPM1:OffsetY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "BPM1 offset Y")
    field( OUT,  "@best_Bpm1offsetY")
}

## BPM1 Offset on Y position, readback value.
record(ai,"$(P):BPM1:OffsetY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "BPM1 offset Y RBV")
    field( SCAN, "1 second")
    field( EGU, "um")
    field( INP,  "@best_rbv_Bpm1offsetY")
}

## Change PID Update Frequency on X position.
record(ao,"$(P):PID:FreqX")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PIDX Update Frequency")
    field( OUT, "@best_PidX_update_frequency")
}

## PID Update Frequency on X position, readback value.
record(ai,"$(P):PID:FreqX_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID X Update Frequency RBV")
    field( SCAN, "1 second")
    field( EGU, "Hz")
    field( INP, "@best_rbv_PidX_update_frequency")
}

## Change PID Update Frequency on Y position.
record(ao,"$(P):PID:FreqY")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID Y Update Frequency")
    field( OUT, "@best_PidY_update_frequency")
}

## PID Update Frequency on Y position, readback value.
record(ai,"$(P):PID:FreqY_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID Y Update Frequency RBV")
    field( SCAN, "1 second")
    field( EGU, "Hz")
    field( INP, "@best_rbv_PidY_update_frequency")
}

## Change PID Update Frequency on Intensity
record(ao,"$(P):PID:FreqI0")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "PID I0 Update Frequency")
    field( OUT, "@best_PidI_update_frequency")
}

## PID Update Frequency on Intensity, readback value.
record(ai,"$(P):PID:FreqI0_RBV")
{
    field( DTYP, "CAENels BEST Ai")
    field( DESC, "PID I0 Update Frequency RBV")
    field( SCAN, "1 second")
    field( EGU, "Hz")
    field( INP, "@best_rbv_PidI_update_frequency")
}

## BEST initialization procedure.
## This command read the BEST configuration file and programs the FPGA with the last saved configuration.
record(bo,"$(P):BEST:Init")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "Best Init from Config")
    field( ZNAM, "Success")
    field( ONAM, "Failure")
    field( OUT,  "@best_Init")
}

## Set TetrAMM HV voltage, BPM0.
record(ao,"$(P):TetrAMM0:HVvoltage")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "TetrAMM HV voltage")
    field( OUT, "@best_TetrAMM0HVvoltage")
}

## Set TetrAMM HV voltage, BPM1.
record(ao,"$(P):TetrAMM1:HVvoltage")
{
    field( DTYP, "CAENels BEST Ao")
    field( DESC, "TetrAMM HV voltage")
    field( OUT, "@best_TetrAMM1HVvoltage")
}

## Enable TetrAMM HV module, BPM0.
record(bo,"$(P):TetrAMM0:HVenable")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "TetrAMM HV enable")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_TetrAMM0HVenable")
}

## Enable TetrAMM HV module, BPM1.
record(bo,"$(P):TetrAMM1:HVenable")
{
    field( DTYP, "CAENels BEST Bo")
    field( DESC, "TetrAMM HV enable")
    field( ZNAM, "Disabled")
    field( ONAM, "Enabled")
    field( OUT,  "@best_TetrAMM1HVenable")
}

## Check if a device (TetrAMM/EnBOX) is connected on SFPA.
record(bi,"$(P):BEST:SFPA_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "TetrAMM on SFP A")
    field( ZNAM, "No TetrAMM")
    field( ONAM, "TetrAMM")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_SfpA")
}

## Check if a device (TetrAMM/EnBOX) is connected on SFPB.
record(bi,"$(P):BEST:SFPB_RBV")
{
    field( DTYP, "CAENels BEST Bi")
    field( DESC, "TetrAMM on SFP B")
    field( ZNAM, "No TetrAMM")
    field( ONAM, "TetrAMM")
    field( SCAN, "1 second")
    field( INP,  "@best_rbv_SfpB")
}
